Computing the height of a binary tree
In this exercise you will write a function to compute the height of a binary tree.  The height of a binary tree is the length of a longest path from the root of the tree to a leaf.  Let's look at some examples.  The height of the tree in the first example is 2 because the path from the root to the leaf labeled by 4 is of length 2. 

      2
     / \
    1   3
         \
          4
 In the picture below the height is 1.  

      2
     / 
    1   
In the next example the height is 3 because of the path from the root to the vertex with label 2.

                5
               / \
              3   6
             / \
            1   4
             \
              2

The height of a tree with a single node is 0.  We will adopt the useful convention that the empty tree has height -1, i.e. when the root of the tree is nullptr we say the height is -1.

Implementation details: We will work again with our usual Node struct:

struct Node {
  int val {};
  Node* left {};
  Node* right {};
};
We don't need the val member variable at all for computing the height.  We still include it as it can help with debugging.  In the test cases, a tree with 
n
n nodes will always be a binary search tree and have values 
1
,
…
,
n
1,…,n.

The function you are to write has the signature

int height(Node* root);

The function should return the height of the tree whose root is pointed to by the input argument root.  Implement this function in the height.cpp file.

Algorithmic formulation of height: To design an algorithm it may be useful to formulate the height of the tree in a more mathematical way as follows:

if (root == nullptr) 
    height = -1
else 
    height = 1 + max(height(root->left), height(root->right))
The longest path from the root to a leaf either goes via its left child or its right child, and the length of this path will be one longer than the length of a longest path from the corresponding child to a leaf.  As we saw with the factorial and Fibonacci functions, this kind of mathematical definition can be very convenient to convert into a recursive algorithm.

Time complexity: When the tree has 
n
n nodes, your function should work in time 
O
(
n
)
O(n).

Grading: We provide 5 test cases for you in main.cpp.  When you hit mark we test your code against these 5 test cases and 15 more test cases for a total of 20 test cases.  Your score out of 100 for this exercise will be 5 * #number of test cases passed.